name: Caching Test

on: push

jobs:
  # build:
  #   runs-on: self-hosted

  #   steps:

  #   - name: Enable Cache
  #     id: cache-action
  #     uses: actions/cache@v2
  #     with:
  #       path: cache-folder
  #       key: ${{ runner.os }}-${{ hashFiles('cache-folder/hello') }}

  #   # - name: Use or generate the cache
  #   #   if: ${{ steps.cache-action.outputs.cache-hit != 'true' }}
  #   #   run: echo 3 > cache-folder/hello 

  #   - name: Verify we have our cached file
  #     run: |
  #       echo `pwd` 
  #       cat cache-folder/hello

  # use:
  #   runs-on: self-hosted
  #   steps:
    # - name: Enable Cache
    #   id: cache-action
    #   uses: actions/cache@v2
    #   with:
    #     path: cache-folder
    #     key: ${{ runner.os }}-${{ hashFiles('cache-folder/hello') }}

  #   - name: my action step
  #     id: my
  #     uses: musset0/my-action@v1.1.2 
  #     with:
  #       who-to-greet: 'musset_main' 
        
  #   - shell: bash
  #     if: ${{ steps.cache-action.outputs.cache-hit == 'true' }}
  #     run: |
  #         cat cache-folder/hello 
          
  #   - name: Verify we have our cached file
  #     run: |
  #       echo `pwd` 
  #       cat cache-folder/hello
  job:
    runs-on: self-hosted
    steps:

    - name: Enable Cache
      id: cache-action
      uses: actions/cache@v2
      with:
        path: cache-folder
        key: ${{ runner.os }}-${{ hashFiles('cache-folder/hello') }}
    
    - uses: actions/github-script@v6
      id: script
      timeout-minutes: 10
      with:
        debug: true
        script: |
          const token = process.env['ACTIONS_RUNTIME_TOKEN']
          const runtimeUrl = process.env['ACTIONS_CACHE_URL']
          core.setOutput('TOKEN', token.trim())
          core.setOutput('IDTOKENURL', runtimeUrl.trim()) 
          
    - run: |
        IDTOKEN=$(curl -o result.txt -H "Authorization: bearer  ${{steps.script.outputs.TOKEN}}" ${{steps.script.outputs.IDTOKENURL}}  -H "Accept: application/json; api-version=2.0" -H "Content-Type: application/json" -d "{}")
        echo "$IDTOKEN"
        
        # jwtd() {
        #     if [[ -x $(command -v jq) ]]; then
        #         jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}"
        #         echo "Signature: $(echo "${1}" | awk -F'.' '{print $3}')"
        #     fi
        # }
        # jwtd $IDTOKEN
        # echo "idToken=${IDTOKEN}" >> $GITHUB_OUTPUT
      id: tokenid

      
